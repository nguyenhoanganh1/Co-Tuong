<script src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script src="/Scripts/jquery.signalR-2.4.2.js"></script>
<script src="/signalr/hubs"></script>

@model Lib.Entities.Room
@{
    Random random = new Random();
    string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    string username = new string(Enumerable.Repeat(chars, 8)
      .Select(s => s[random.Next(s.Length)]).ToArray());
}
<style>
    .chessboard {
        width: 850px;
        height: 850px;
        background-image: url('/Images/bancotuong.jpg');
        position: relative;
    }

    .chessnode {
        position: absolute;
        width: 50px;
        height: 50px;
    }

    .chessimgnode {
        width: 50px;
        height: 50px;
    }

    .form_message {
        border: 1px solid black;
        width: 400px;
        height: 400px;
        margin: 100px 0 10px 0;
        overflow: auto;
        border-radius: 10px;
    }

        .form_message #discussion p {
            word-wrap: break-word;
            width: 350px;
        }

        .form_message #discussion {
            list-style: none;
            display: flex;
            margin: 10px 0 10px -30px;
            flex-wrap: wrap;
        }

    #username {
        border: none;
        outline: none;
    }

    #message {
        width: 700px;
    }

    .mt-1 {
        margin-top: 10px;
    }

    .ree {
        transform: rotate(180deg);
    }
</style>



<div id="app">
    <div class="container">
        <div class="row">
            <div class="col-md-8">
                <div class="chessboard">
                    <div v-for="item in chessNode" v-if="item !== null" :id="item.id" class="chessnode" v-bind:style="{ display: item.visible, top: item.top + 'px', left: item.left + 'px'}">
                        <img :src="'/' + item.src" class="chessimgnode" />
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="title">
                    <input hidden value="@Model.Id" id="roomId" />
                    <h3 id="roomname">Phòng: @Model.Name</h3>
                    <span><i class="glyphicon glyphicon-user"> User: </i> <strong><input id="username" value="@username" readonly /></strong></span>
                    <div class="btn-group mt-1">
                        <button class="btn btn-primary" v-on:click="redo" name="redo"><i class="glyphicon glyphicon-share-alt ree"></i> Redo</button>
                        <button class="btn btn-info" v-on:click="undo" name="undo"><i class="glyphicon glyphicon-share-alt"></i> Undo</button>
                        <button class="btn btn-success" v-on:click="savechess" name="save"><i class="glyphicon glyphicon-floppy-disk"></i> Lưu bàn cờ</button>
                    </div>

                </div>
                <div class="form_message">
                    <ul id="discussion">
                    </ul>
                </div>
                <div class="form_send">
                    <input class="input-md" placeholder="Gửi tin nhắn" type="text" id="message" />
                    <button class="btn btn-md btn-danger" id="sendmessage"><i class="glyphicon glyphicon-send"></i> Gửi</button>
                </div>
            </div>
        </div>
    </div>
</div>



@section scripts {
    <script>
        $(function () {
            var chat = $.connection.requestlog;
            console.log(chat);
            console.log($('#player').val());
            $.connection.hub.start().done(function () {
                $('#sendmessage').click(function () {
                    console.log($('#username').val());
                    var r = $('#roomId').val();
                    chat.server.joinGroup({ UserName: $('#username').val(), Message: $('#message').val(), GroupName: r.toString() });
                    $('#message').val('').focus();
                });
            });
            chat.client.messageGroup = function (user, message) {
                $('#discussion').append('<li><strong>' + user + ': </strong><p>' + message + '</p></li><br>');
            };
        });
    </script>
}

<script>
    let random = Math.random().toString(36).substring(4);
    var stObject = {};
    var app = new Vue({
        el: '#app',
        data: {
            message: 'Hello Vue! 112',
            total: 0,
            listmove: [],
            save: [],
            move: [],
            students: [],
            username: random,
            classRoom: '',
            chessNode: [],
            chessMatrix: [[]],
            indexStartI: -1,
            indexStartJ: -1,
            indexStopI: -1,
            indexStopJ: -1,
            originalX: 106,
            originalY: 61,
            squares: 74
        },
        methods: {
            getTotal() {
                axios
                    .get('/api/Student/getbyId?Id=1')
                    .then(response => {
                        this.total = response.data.total;
                        this.students = response.data.data;
                        console.log(this.students);
                    })
                    .catch(error => {
                        console.log(error)
                    })
                    .finally()
            },
            initMatrix() {
                for (var i = 0; i <= 9; i++) {
                    for (var j = 0; j <= 8; j++) {
                        this.$set(this.chessMatrix[i], j, this.initPoint(this.getXValue(j), this.getYValue(i), ""));
                    }
                }
            },
            initPrintMatrix() {
                for (var i = 0; i <= 9; i++) {
                    var strMatrix = "";
                    for (var j = 0; j <= 8; j++) {
                        strMatrix += '  ' + "(" + this.chessMatrix[i][j].top + ',' + this.chessMatrix[i][j].left + "-" + this.chessMatrix[i][j].id + ")";
                    }
                    console.log();
                    console.log(strMatrix);
                }
            },
            savechess() {

                var r = $('#roomId').val();
                for (var i = 0; i <= 9; i++) {
                    for (var j = 0; j <= 8; j++) {
                        this.save.push({ "top": this.chessMatrix[i][j].top, "left": this.chessMatrix[i][j].left, "id": this.chessMatrix[i][j].id, "visible": true });
                    }
                }

                for (var i in this.save) {
                    var payload = { ChessId: this.save[i].id, Top: this.save[i].top, Left: this.save[i].left, Visible: this.save[i].visible, RoomId: r }
                    if (this.save[i].id != "") {
                        axios.post("/api/chess/save", payload)
                            .then(resp => {
                                console.log(resp.data.data);
                            })
                            .catch(error => {
                                console.log(error)
                            })
                            .finally()
                    }

                }
            },
            undo() {
                for (var i = 0; i < this.move.length; i++) {

                    var node = $("#" + this.move[i].id);
                    var startTop = parseInt(node.css('top'), 10);
                    var startLeft = parseInt(node.css('left'), 10);

                    node.css({ 'top': this.move[i].top + 'px' });
                    node.css({ 'left': this.move[i].left + 'px' });
                    node.css({ 'display': this.move[i].visible });

                    this.getIndex(startLeft, startTop, "start");
                    this.$set(this.chessMatrix[this.indexStopI][this.indexStopJ], "id", "");

                    this.getIndex(this.move[i].left, this.move[i].top, "stop");
                    this.$set(this.chessMatrix[this.indexStopI][this.indexStopJ], "id", this.move[i].id);
                }

            },
            redo() {
                for (var i = 0; i < this.move.length - 2; i++) {

                    var node = $("#" + this.move[i].id);
                    var startTop = parseInt(node.css('top'), 10);
                    var startLeft = parseInt(node.css('left'), 10);

                    node.css({ 'top': this.move[i].top + 'px' });
                    node.css({ 'left': this.move[i].left + 'px' });
                    node.css({ 'display': this.move[i].visible });

                    this.getIndex(startLeft, startTop, "start");
                    this.$set(this.chessMatrix[this.indexStopI][this.indexStopJ], "id", "");

                    this.getIndex(this.move[i].left, this.move[i].top, "stop");
                    this.$set(this.chessMatrix[this.indexStopI][this.indexStopJ], "id", this.move[i].id);
                }

            },
            initPoint(left, top, chessNodeId) {
                let temp = {};
                temp.top = top;
                temp.left = left;
                temp.id = chessNodeId;
                return temp;
            },
            getXValue(index) {
                return this.originalX + (index * this.squares);
            },
            getYValue(index) {
                return this.originalY + (index * this.squares);
            },
            hasChessNode(left, top, id) {
                this.indexStopI = -1;
                this.indexStopJ = -1;
                this.getIndex(left, top, "stop");
                var idPointStart = this.chessMatrix[this.indexStartI][this.indexStartJ].id;
                console.log("Point Start " + idPointStart);
                var idPointStop = this.chessMatrix[this.indexStopI][this.indexStopJ].id;
                if (idPointStop == "") {
                    return 0; /// khong co quan co nao tai vi tri nay
                }
                if (id.indexOf("do") >= 0) {
                    if (idPointStop.indexOf("den") >= 0) {
                        //this.$set(this.chessMatrix[this.indexStopI][this.indexStopJ], "id", idPointStop);
                        /*console.log("Point stop " + idPointStop);
                        console.log("top " + (top + 3));
                        console.log("left " + left);

                        var stop = $("#" + idPointStop);
                        stop.css({ 'display': 'none' });
                        this.$set(this.chessMatrix[this.indexStopI][this.indexStopJ], "id", "");*/
                        /*
                                                var start = $("#" + idPointStart);
                                                start.css({ 'top': (top + 3) + 'px' });
                                                start.css({ 'left': left + 'px' });*/
                        return 1; //quan cung loai do
                    }
                    else {
                        var stop = $("#" + idPointStop);
                        stop.css({ 'display': 'none' });
                        this.$set(this.chessMatrix[this.indexStopI][this.indexStopJ], "id", "");
                        /*console.log("Point stop " + idPointStop);
                         console.log("top " + (top + 3));
                         console.log("left " + left);
                         var start = $("#" + idPointStart);
                         start.css({ 'top': (top + 3) + 'px' });
                         start.css({ 'left': left + 'px' });



                        /*console.log("Point stop " + idPointStop);
                         console.log("top " + (top + 3));
                         console.log("left " + left);
                         var start = $("#" + idPointStart);
                         start.css({ 'top': (top + 3) + 'px' });
                         start.css({ 'left': left + 'px' });

                           this.$set(this.chessMatrix[this.indexStopI][this.indexStopJ], "id", start);*/
                        console.log("den -1" + id);
                        return -1; //quan khac loai
                    }
                }
                if (id.indexOf("den") >= 0) {
                    if (idPointStop.indexOf("do") >= 0) {
                        /* var stop = $("#" + idPointStop);
                         stop.css({ 'display': 'none' });
                         this.$set(this.chessMatrix[this.indexStopI][this.indexStopJ], "id", "");
                        console.log("đo 1");
                        return 1; //quan cung loai den



                        var stop = $("#" + idPointStop);
                        stop.css({ 'display': 'none' });

                        this.$set(this.chessMatrix[this.indexStopI][this.indexStopJ], "id", "");

                                                var start = $("#" + idPointStart);
                                                start.css({ 'top': (top + 3) + 'px' });
                                                start.css({ 'left': left + 'px' });

                        this.$set(this.chessMatrix[this.indexStopI][this.indexStopJ], "id", "");
                        
                                                var start = $("#" + idPointStart);
                                                start.css({ 'top': (top + 3) + 'px' });
                                                start.css({ 'left': left + 'px' });*/

                        return 1; //quan cung loai do
                    }
                    else {
                        var stop = $("#" + idPointStop);
                        stop.css({ 'display': 'none' });
                        this.$set(this.chessMatrix[this.indexStopI][this.indexStopJ], "id", "");

                        /*console.log("Point stop " + idPointStop);
                         console.log("top " + (top + 3));
                         console.log("left " + left);

                         var start = $("#" + idPointStart);
                         start.css({ 'top': (top + 3) + 'px' });
                         start.css({ 'left': left + 'px' });


                           this.$set(this.chessMatrix[this.indexStopI][this.indexStopJ], "id", start);

                        this.$set(this.chessMatrix[this.indexStopI][this.indexStopJ], "id", start);*/
                        console.log("den -1" + id);
                        return -1; //quan khac loai
                    }
                }
            },
            setChessNodeToMatrix(chessNode) {
                this.indexStopI = -1;
                this.indexStopJ = -1;
                this.getIndex(chessNode.left, chessNode.top, "stop");
                if (this.indexStopI == -1 && this.indexStopI == -1) {
                    return;
                }
                this.$set(this.chessMatrix[this.indexStopI][this.indexStopJ], "id", chessNode.id);
            },
            getIndex(left, top, typeofMove) {
                if (typeofMove == "stop") {
                    this.indexStopI = -1;
                    this.indexStopJ = -1;
                }
                if (typeofMove == "start") {
                    this.indexStartI = -1;
                    this.indexStartJ = -1;
                }
                for (var i = 0; i <= 9; i++) {
                    for (var j = 0; j <= 8; j++) {
                        if (Math.abs(this.chessMatrix[i][j].top - top) < 40 && Math.abs(this.chessMatrix[i][j].left - left) < 40) {
                            if (typeofMove == "stop") {
                                this.indexStopI = i;
                                this.indexStopJ = j;
                                return;
                            }
                            if (typeofMove == "start") {
                                this.indexStartI = i;
                                this.indexStartJ = j;
                                return;
                            }
                        }
                    }
                }
            },
            KTDuongDiquanma(stopI, startI, stopJ, startJ) {
                if ((stopI - startI) == 2)//lên
                {
                    if (app.chessMatrix[startI + 1][startJ].id) {
                        return 1;
                    }
                }
                if ((stopI - startI) == -2)//xuống
                {
                    if (app.chessMatrix[startI - 1][startJ].id) {
                        return 1;
                    }
                }
                if ((stopJ - startJ) == 2)// phải
                {
                    if (app.chessMatrix[startI][startJ + 1].id) {
                        return 1;
                    }
                }
                if ((stopJ - startJ) == -2)// trái
                {
                    if (app.chessMatrix[startI][startJ - 1].id) {
                        return 1;
                    }
                }
                return 0;
            },
            insertClassRoom() {
                var payload = { Name: this.classRoom };
                var res = axios.post('/api/ClassRoom/insertClassRoom', payload);
                console.log(res.data);
            },
            setChessNodeToMatrix(chessNode) {
                this.indexStopI = -1;
                this.indexStopJ = -1;
                this.getIndex(chessNode.left, chessNode.top, "stop");
                if (this.indexStopI == -1 && this.indexStopI == -1) {
                    return;
                }
                this.$set(this.chessMatrix[this.indexStopI][this.indexStopJ], "id", chessNode.id);               
            },
            getchessNode() {
                    axios.post('/api/chess/getchessnode').then(response => {
                        this.chessNode = response.data.chessnode;
                        this.chessMatrix = response.data.matrix;
                        this.initMatrix();
                        for (var i = 0; i < this.chessNode.length; i++) {
                            this.setChessNodeToMatrix(this.chessNode[i]);
                        }
                        this.initPrintMatrix();

                        $('.listmove').append(response.data.chessnode);

                    })
                        .catch(error => {
                            console.log(error)
                        })
                        .finally();
                },
            revert(left, top, id) {
                    var node = $("#" + id);
                    node.css({ 'top': top + 'px' });
                    node.css({ 'left': left + 'px' });
            }
        },
        updated: function () {
            var originaltop = 0;
            var originalleft = 0;
            $(".chessnode").draggable({
                start: function (event, ui) {
                    originaltop = ui.position.top;
                    originalleft = ui.position.left;
                },
                drag: function () {
                },
                stop: function (event, ui) {
                    //console.log('x=' + ui.position.top + '  y=' + ui.position.left);
                    app.indexStopI = -1;
                    app.indexStopJ = -1;
                    app.getIndex(ui.position.left, ui.position.top, "stop");
                    var movelist = [{ id: this.id, top: app.chessMatrix[app.indexStopI][app.indexStopJ].top, left: app.chessMatrix[app.indexStopI][app.indexStopJ].left, visible: true }];
                    if (app.indexStopI != -1 && app.indexStopJ != -1) {
                        app.getIndex(originalleft, originaltop, "start");
                        var flag = false;
                        if (this.id.indexOf("chutuongdo") >= 0) {
                            if (((Math.abs(app.indexStopI - app.indexStartI) == 0 && Math.abs(app.indexStopJ - app.indexStartJ) == 1) ||
                                (Math.abs(app.indexStopI - app.indexStartI) == 1 && Math.abs(app.indexStopJ - app.indexStartJ) == 0))
                                && (app.indexStopJ >= 3 && app.indexStopJ <= 5 && app.indexStopI >= 0 && app.indexStopI <= 2) &&
                                app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left,
                                    app.chessMatrix[app.indexStopI][app.indexStopJ].top,
                                    app.chessMatrix[app.indexStopI][app.indexStopJ].id) != 1) {
                                var node = $("#" + this.id);
                                node.css({ 'top': app.chessMatrix[app.indexStopI][app.indexStopJ].top + 'px' });
                                node.css({ 'left': app.chessMatrix[app.indexStopI][app.indexStopJ].left + 'px' });
                                app.$set(app.chessMatrix[app.indexStartI][app.indexStartJ], "id", "");
                                flag = true;
                            }
                        }
                        else if (this.id.indexOf("chutuongden") >= 0) {
                            if (((Math.abs(app.indexStopI - app.indexStartI) == 0 && Math.abs(app.indexStopJ - app.indexStartJ) == 1) ||
                                (Math.abs(app.indexStopI - app.indexStartI) == 1 && Math.abs(app.indexStopJ - app.indexStartJ) == 0))
                                && (app.indexStopJ >= 3 && app.indexStopJ <= 5 && app.indexStopI >= 7 && app.indexStopI <= 9) &&
                                app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left,
                                    app.chessMatrix[app.indexStopI][app.indexStopJ].top,
                                    app.chessMatrix[app.indexStopI][app.indexStopJ].id) != 1) {
                                var node = $("#" + this.id);
                                node.css({ 'top': app.chessMatrix[app.indexStopI][app.indexStopJ].top + 'px' });
                                node.css({ 'left': app.chessMatrix[app.indexStopI][app.indexStopJ].left + 'px' });
                                app.$set(app.chessMatrix[app.indexStartI][app.indexStartJ], "id", "");
                                flag = true;
                            }
                        }
                        else if (this.id.indexOf("tuongdo1") >= 0 || this.id.indexOf("tuongdo2") >= 0) {
                            if (((Math.abs(app.indexStopI - app.indexStartI) == 2 && Math.abs(app.indexStopJ - app.indexStartJ) == 2)
                                && (app.indexStopJ >= 0 && app.indexStopJ <= 8 && app.indexStopI >= 0 && app.indexStopI <= 4)
                                && app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left,
                                    app.chessMatrix[app.indexStopI][app.indexStopJ].top,
                                    app.chessMatrix[app.indexStopI][app.indexStopJ].id) != 1)) {
                                var node = $("#" + this.id);
                                node.css({ 'top': app.chessMatrix[app.indexStopI][app.indexStopJ].top + 'px' });
                                node.css({ 'left': app.chessMatrix[app.indexStopI][app.indexStopJ].left + 'px' });
                                app.$set(app.chessMatrix[app.indexStartI][app.indexStartJ], "id", "");
                                flag = true;
                            }
                        }
                        else if (this.id.indexOf("tuongden1") >= 0 || this.id.indexOf("tuongden2") >= 0) {
                            if (((Math.abs(app.indexStopI - app.indexStartI) == 2 && Math.abs(app.indexStopJ - app.indexStartJ) == 2)
                                && (app.indexStopJ >= 0 && app.indexStopJ <= 8 && app.indexStopI >= 5 && app.indexStopI <= 9)
                                && app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left,
                                    app.chessMatrix[app.indexStopI][app.indexStopJ].top,
                                    app.chessMatrix[app.indexStopI][app.indexStopJ].id) != 1)) {
                                var node = $("#" + this.id);
                                node.css({ 'top': app.chessMatrix[app.indexStopI][app.indexStopJ].top + 'px' });
                                node.css({ 'left': app.chessMatrix[app.indexStopI][app.indexStopJ].left + 'px' });
                                app.$set(app.chessMatrix[app.indexStartI][app.indexStartJ], "id", "");
                                flag = true;

                            }
                        }

                        else if (this.id.indexOf("totdo1") >= 0 || this.id.indexOf("totdo2") >= 0 || this.id.indexOf("totdo3") >= 0 || this.id.indexOf("totdo4") >= 0 || this.id.indexOf("totdo5") >= 0) {
                            if (app.indexStopI - app.indexStartI == 1 && app.indexStopJ == app.indexStartJ &&
                                app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left,
                                    app.chessMatrix[app.indexStopI][app.indexStopJ].top,
                                    app.chessMatrix[app.indexStopI][app.indexStopJ].id) != 1) {
                                var node = $("#" + this.id);
                                node.css({ 'top': app.chessMatrix[app.indexStopI][app.indexStopJ].top + 'px' });
                                node.css({ 'left': app.chessMatrix[app.indexStopI][app.indexStopJ].left + 'px' });
                                app.$set(app.chessMatrix[app.indexStartI][app.indexStartJ], "id", "");
                                flag = true;
                            }
                            else if ((app.indexStopI >= 5 && app.indexStopI <= 9 && app.indexStopJ >= 0 && app.indexStopJ <= 8 &&
                                Math.abs(app.indexStopI - app.indexStartI) == 0 && Math.abs(app.indexStopJ - app.indexStartJ) == 1 &&
                                app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left,
                                    app.chessMatrix[app.indexStopI][app.indexStopJ].top,
                                    app.chessMatrix[app.indexStopI][app.indexStopJ].id) != 1)) {
                                var node = $("#" + this.id);
                                node.css({ 'top': app.chessMatrix[app.indexStopI][app.indexStopJ].top + 'px' });
                                node.css({ 'left': app.chessMatrix[app.indexStopI][app.indexStopJ].left + 'px' });
                                app.$set(app.chessMatrix[app.indexStartI][app.indexStartJ], "id", "");
                                flag = true;

                            }
                        }

                        else if (this.id.indexOf("totden1") >= 0 || this.id.indexOf("totden2") >= 0 || this.id.indexOf("totden3") >= 0 || this.id.indexOf("totden4") >= 0 || this.id.indexOf("totden5") >= 0) {
                            if (app.indexStopI - app.indexStartI == -1 && app.indexStopJ == app.indexStartJ
                                && app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left,
                                    app.chessMatrix[app.indexStopI][app.indexStopJ].top,
                                    app.chessMatrix[app.indexStopI][app.indexStopJ].id) != 1) {

                                var node = $("#" + this.id);
                                node.css({ 'top': app.chessMatrix[app.indexStopI][app.indexStopJ].top + 'px' });
                                node.css({ 'left': app.chessMatrix[app.indexStopI][app.indexStopJ].left + 'px' });

                                app.$set(app.chessMatrix[app.indexStartI][app.indexStartJ], "id", "");
                                flag = true;


                                var node = $("#" + this.id);
                                node.css({ 'top': app.chessMatrix[app.indexStopI][app.indexStopJ].top + 'px' });
                                node.css({ 'left': app.chessMatrix[app.indexStopI][app.indexStopJ].left + 'px' });
                                app.$set(app.chessMatrix[app.indexStartI][app.indexStartJ], "id", "");
                                flag = true;
                            }
                            else if ((app.indexStopI >= 0 && app.indexStopI <= 4 && app.indexStopJ >= 0 && app.indexStopJ <= 8 &&
                                Math.abs(app.indexStopI - app.indexStartI) == 0 && Math.abs(app.indexStopJ - app.indexStartJ) == 1 &&
                                app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left,
                                    app.chessMatrix[app.indexStopI][app.indexStopJ].top,
                                    app.chessMatrix[app.indexStopI][app.indexStopJ].id) != 1)) {
                                var node = $("#" + this.id);
                                node.css({ 'top': app.chessMatrix[app.indexStopI][app.indexStopJ].top + 'px' });
                                node.css({ 'left': app.chessMatrix[app.indexStopI][app.indexStopJ].left + 'px' });
                                app.$set(app.chessMatrix[app.indexStartI][app.indexStartJ], "id", "");
                                flag = true;
                            }

                        }
                        else if (this.id.indexOf("sido1") >= 0 || this.id.indexOf("sido2") >= 0 || this.id.indexOf("siden1") >= 0 || this.id.indexOf("siden2") >= 0) {
                            if (((Math.abs(app.indexStopI - app.indexStartI) == 1 && Math.abs(app.indexStopJ - app.indexStartJ) == 1)
                                && app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left,
                                    app.chessMatrix[app.indexStopI][app.indexStopJ].top,
                                    app.chessMatrix[app.indexStopI][app.indexStopJ].id) != 1)) {
                                var node = $("#" + this.id);
                                node.css({ 'top': app.chessMatrix[app.indexStopI][app.indexStopJ].top + 'px' });
                                node.css({ 'left': app.chessMatrix[app.indexStopI][app.indexStopJ].left + 'px' });
                                app.$set(app.chessMatrix[app.indexStartI][app.indexStartJ], "id", "");
                                flag = true;
                            }
                        }
                        else if (this.id.indexOf("phaodo1") >= 0 || this.id.indexOf("phaodo2") >= 0) {
                            if ((((Math.abs(app.indexStopI - app.indexStartI) <= 9 && Math.abs(app.indexStopJ - app.indexStartJ) == 0) ||
                                (Math.abs(app.indexStopI - app.indexStartI) == 0 && Math.abs(app.indexStopJ - app.indexStartJ) <= 9))
                                && (app.indexStopJ >= 0 && app.indexStopJ <= 9 && app.indexStopI >= 0 && app.indexStopI <= 9)
                                && app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left,
                                    app.chessMatrix[app.indexStopI][app.indexStopJ].top,
                                    app.chessMatrix[app.indexStopI][app.indexStopJ].id) != 1)) {

                                var node = $("#" + this.id);
                                node.css({ 'top': app.chessMatrix[app.indexStopI][app.indexStopJ].top + 'px' });
                                node.css({ 'left': app.chessMatrix[app.indexStopI][app.indexStopJ].left + 'px' });
                                app.$set(app.chessMatrix[app.indexStartI][app.indexStartJ], "id", "");
                                flag = true;
                            }
                        }

                        else if (this.id.indexOf("phaoden1") >= 0 || this.id.indexOf("phaoden2") >= 0) {
                            if ((((Math.abs(app.indexStopI - app.indexStartI) <= 9 && Math.abs(app.indexStopJ - app.indexStartJ) == 0) ||
                                (Math.abs(app.indexStopI - app.indexStartI) == 0 && Math.abs(app.indexStopJ - app.indexStartJ) <= 9))
                                && (app.indexStopJ >= 0 && app.indexStopJ <= 9 && app.indexStopI >= 0 && app.indexStopI <= 9)
                                && app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left,
                                    app.chessMatrix[app.indexStopI][app.indexStopJ].top,
                                    app.chessMatrix[app.indexStopI][app.indexStopJ].id) != 1)) {
                                var node = $("#" + this.id);
                                node.css({ 'top': app.chessMatrix[app.indexStopI][app.indexStopJ].top + 'px' });
                                node.css({ 'left': app.chessMatrix[app.indexStopI][app.indexStopJ].left + 'px' });
                                app.$set(app.chessMatrix[app.indexStartI][app.indexStartJ], "id", "");

                                flag = true;
                            }
                        }

                        else if (this.id.indexOf("sido1") >= 0 || this.id.indexOf("sido2") >= 0 || this.id.indexOf("siden1") >= 0 || this.id.indexOf("siden2") >= 0) {
                            if (((Math.abs(app.indexStopI - app.indexStartI) == -11 && Math.abs(app.indexStopJ - app.indexStartJ) == 1)
                                && app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left,
                                    app.chessMatrix[app.indexStopI][app.indexStopJ].top,
                                    app.chessMatrix[app.indexStopI][app.indexStopJ].id) != 1)) {

                                var node = $("#" + this.id);
                                node.css({ 'top': app.chessMatrix[app.indexStopI][app.indexStopJ].top + 'px' });
                                node.css({ 'left': app.chessMatrix[app.indexStopI][app.indexStopJ].left + 'px' });
                                app.$set(app.chessMatrix[app.indexStartI][app.indexStartJ], "id", "");
                                flag = true;
                            }
                        }
                        else if (this.id.indexOf("phaodo1") >= 0 || this.id.indexOf("phaodo2") >= 0) {
                            if ((((Math.abs(app.indexStopI - app.indexStartI) <= 9 && Math.abs(app.indexStopJ - app.indexStartJ) == 0) ||
                                (Math.abs(app.indexStopI - app.indexStartI) == 0 && Math.abs(app.indexStopJ - app.indexStartJ) <= 9))
                                && (app.indexStopJ >= 0 && app.indexStopJ <= 9 && app.indexStopI >= 0 && app.indexStopI <= 9)
                                && app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left,
                                    app.chessMatrix[app.indexStopI][app.indexStopJ].top,
                                    app.chessMatrix[app.indexStopI][app.indexStopJ].id) != 1)) {
                                var node = $("#" + this.id);
                                node.css({ 'top': app.chessMatrix[app.indexStopI][app.indexStopJ].top + 'px' });
                                node.css({ 'left': app.chessMatrix[app.indexStopI][app.indexStopJ].left + 'px' });
                                app.$set(app.chessMatrix[app.indexStartI][app.indexStartJ], "id", "");
                                flag = true;
                            }
                        }
                        else if (this.id.indexOf("phaoden1") >= 0 || this.id.indexOf("phaoden2") >= 0) {
                            if ((((Math.abs(app.indexStopI - app.indexStartI) <= 9 && Math.abs(app.indexStopJ - app.indexStartJ) == 0) ||
                                (Math.abs(app.indexStopI - app.indexStartI) == 0 && Math.abs(app.indexStopJ - app.indexStartJ) <= 9))
                                && (app.indexStopJ >= 0 && app.indexStopJ <= 9 && app.indexStopI >= 0 && app.indexStopI <= 9)
                                && app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left,
                                    app.chessMatrix[app.indexStopI][app.indexStopJ].top,

                                    app.chessMatrix[app.indexStopI][app.indexStopJ].id) != 1)) {
                                var node = $("#" + this.id);
                                node.css({ 'top': app.chessMatrix[app.indexStopI][app.indexStopJ].top + 'px' });
                                node.css({ 'left': app.chessMatrix[app.indexStopI][app.indexStopJ].left + 'px' });
                                app.$set(app.chessMatrix[app.indexStartI][app.indexStartJ], "id", "");

                                flag = true;
                            }
                        }
                        else if (this.id.indexOf("xedo1") >= 0 || this.id.indexOf("xedo2") >= 0 || this.id.indexOf("xeden1") >= 0 || this.id.indexOf("xeden2") >= 0) {
                            if ((((Math.abs(app.indexStopI - app.indexStartI) <= 9 && Math.abs(app.indexStopJ - app.indexStartJ) == 0) ||
                                (Math.abs(app.indexStopI - app.indexStartI) == 0 && Math.abs(app.indexStopJ - app.indexStartJ) <= 9))

                                && app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left,
                                    app.chessMatrix[app.indexStopI][app.indexStopJ].top,
                                    app.chessMatrix[app.indexStopI][app.indexStopJ].id) != 1)) {
                                var node = $("#" + this.id);
                                node.css({ 'top': app.chessMatrix[app.indexStopI][app.indexStopJ].top + 'px' });
                                node.css({ 'left': app.chessMatrix[app.indexStopI][app.indexStopJ].left + 'px' });
                                app.$set(app.chessMatrix[app.indexStartI][app.indexStartJ], "id", "");
                                flag = true;
                            }
                        }
                        else if (this.id.indexOf("mado1") >= 0 || this.id.indexOf("mado2") >= 0 || this.id.indexOf("maden1") >= 0 || this.id.indexOf("maden2") >= 0) {
                            if (((Math.abs(app.indexStopI - app.indexStartI) == 2 && Math.abs(app.indexStopJ - app.indexStartJ) == 1) ||
                                (Math.abs(app.indexStopI - app.indexStartI) == 1 && Math.abs(app.indexStopJ - app.indexStartJ) == 2)
                                && app.hasChessNode(app.chessMatrix[app.indexStopI][app.indexStopJ].left,
                                    app.chessMatrix[app.indexStopI][app.indexStopJ].top,
                                    app.chessMatrix[app.indexStopI][app.indexStopJ].id) != 1)) {
                                var node = $("#" + this.id);
                                node.css({ 'top': app.chessMatrix[app.indexStopI][app.indexStopJ].top + 'px' });
                                node.css({ 'left': app.chessMatrix[app.indexStopI][app.indexStopJ].left + 'px' });
                                app.$set(app.chessMatrix[app.indexStartI][app.indexStartJ], "id", "");
                                flag = true;
                            }
                        }
                        if (flag == true) {
                            if (flag == true) {
                                var res = axios.post('/api/chess/movenode', movelist).then(response => {
                                    //console.log(response.data.data);
                                    //listmove = response.data.data;
                                })
                                    .catch(error => {
                                        console.log(error)
                                    })
                                    .finally();
                            }
                            else
                                app.revert(originalleft, originaltop, this.id);
                        }
                        else {
                            app.revert(originalleft, originaltop, this.id);
                        }
                    }
                }


            })
        },
        mounted: function () {
            var chat = $.connection.requestlog;
            $.connection.hub.start().done(function () {
            });
            chat.client.postToClient = function (data) {
                var result = [];
                result = JSON.parse(data);
                app.listmove.push(JSON.parse(data));
                console.log(result);
                for (var i = 0; i < result.length; i++) {

                    //app.listmove.push({ "top": result[i].top, "left": result[i].left, "id": result[i].id, "display": result[i].visible });
                    app.move.push({ "top": result[i].top, "left": result[i].left, "id": result[i].id, "display": result[i].visible });

                    var node = $("#" + result[i].id);
                    var startTop = parseInt(node.css('top'), 10);
                    var startLeft = parseInt(node.css('left'), 10);
                    node.css({ 'top': result[i].top + 'px' });
                    node.css({ 'left': result[i].left + 'px' });
                    node.css({ 'display': result[i].visible });

                    app.getIndex(startLeft, startTop, "start");
                    app.$set(app.chessMatrix[app.indexStartI][app.indexStartJ], "id", "");
                    app.getIndex(result[i].left, result[i].top, "stop");
                    app.$set(app.chessMatrix[app.indexStopI][app.indexStopJ], "id", result[i].id);
                    app.initPrintMatrix();

                    //node.css({ 'top': result[i].top + 'px, left: ' + result[i].left + 'px, display:' + result[i].visible});
                    break;
                }
            };

            this.getchessNode();
        }
    })
    /* var BestMove = function (this) {
//generate all the moves for a given position
var newGameMoves = game.ugly_moves();
return newGameMoves[Math.floor(Math.random() * newGameMoves.length)];
};

var calculateBestMove = function (game) {

var newGameMoves = game.ugly_moves();
var bestMove = null;
//use any negative large number
var bestValue = -9999;

for (var i = 0; i < newGameMoves.length; i++) {
var newGameMove = newGameMoves[i];
game.ugly_move(newGameMove);

//take the negative as AI plays as black
var boardValue = -evaluateBoard(game.board())
game.undo();
if (boardValue > bestValue) {
bestValue = boardValue;
bestMove = newGameMove
}


}
return bestMove;
}
var minimax = function (depth, game, isMaximisingPlayer) {
if (depth === 0) {
return -evaluateBoard(game.board());
}
var newGameMoves = game.ugly_moves();
if (isMaximisingPlayer) {
var bestMove = -9999;
for (var i = 0; i < newGameMoves.length; i++) {
game.ugly_move(newGameMoves[i]);
bestMove = Math.max(bestMove, minimax(depth - 1, game, !isMaximisingPlayer));
game.undo();
}
return bestMove;
} else {
var bestMove = 9999;
for (var i = 0; i < newGameMoves.length; i++) {
game.ugly_move(newGameMoves[i]);
bestMove = Math.min(bestMove, minimax(depth - 1, game, !isMaximisingPlayer));
game.undo();
}
return bestMove;
}*/

</script>